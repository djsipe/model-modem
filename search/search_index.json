{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Model Modem \u2693\ufe0e Photo by Patrick Tomasso on Unsplash Rationale \u2693\ufe0e The concept of a blog has always appealed to me. I often find great tutorials and interesting content in other author's blogs. But, I frankly do not have the time or energy needed to maintain a blog that would be worth reading. I gave this issue a lot of thought and ultimately decided that what would be simpler would be a site where I could jot down my notes and findings on various topics in a less idempotent way. Blogs suffer from the traditional expectation that each article, once written, will not change over time. This puts a ton of pressure on blog authors to fully explore and expound upon their ideas on the first draft. What this site is attempting to achieve is a to present an evolving compendium generally composed of technical findings and documentation. Each page is subject to change and may move around as time goes on.","title":"About"},{"location":"#model-modem","text":"Photo by Patrick Tomasso on Unsplash","title":"Model Modem"},{"location":"#rationale","text":"The concept of a blog has always appealed to me. I often find great tutorials and interesting content in other author's blogs. But, I frankly do not have the time or energy needed to maintain a blog that would be worth reading. I gave this issue a lot of thought and ultimately decided that what would be simpler would be a site where I could jot down my notes and findings on various topics in a less idempotent way. Blogs suffer from the traditional expectation that each article, once written, will not change over time. This puts a ton of pressure on blog authors to fully explore and expound upon their ideas on the first draft. What this site is attempting to achieve is a to present an evolving compendium generally composed of technical findings and documentation. Each page is subject to change and may move around as time goes on.","title":"Rationale"},{"location":"dev/cheat-codes/","text":"Cheat Codes \u2693\ufe0e The Konami Code Docker \u2693\ufe0e Below are some less-common Docker commands. Get Runtime Statistics \u2693\ufe0e 1 docker stats $( docker ps --format = '{{.Names}}' ) This command will display detailed information about the docker containers you have running locally including: Container Name Name CPU % Memory Usage/Limit Memory % Network I/O Block Storage I/O Process IDs Remove All Stopped Containers \u2693\ufe0e 1 docker rm $( docker ps -a -q ) If you have a lot of stopped containers (perhaps you didn't supply a container name when running images), you can run this command to automatically remove all stopped containers. Remove Untagged Containers \u2693\ufe0e 1 docker images -q --filter \"dangling=true\" | xargs docker rmi Prune Everything \u2693\ufe0e 1 docker system prune --volumes This command will remove all unused: Containers Images (dangling & unused) Networks (Optionally) Volumes Note If you do not want to prune volumes, remove --volumes from the command above. Troubleshooting \u2693\ufe0e Cannot Connect to Container from Host \u2693\ufe0e In order to connect to a webserver you have running on your docker container, make sure you bind the server to 0.0.0.0 and not 127.0.0.1 like you would locally. Git \u2693\ufe0e Remove Items from Git w/o Deleting \u2693\ufe0e If you ever accidentally added something to your git repository and want to remove it from git without actually deleting the local version, you can run one of these commands: 1 git rm --cached <file-name> Remove a file from git without deleting it locally 1 git rm --cached -r <directory-name> Remove an entire directory from git without deleting it locally Repoint Remote Endpoint \u2693\ufe0e 1 git remote set-url <remote-name> <url> If you ever move your code to a new remote system (say from GitHub to GitLab), you can use this command to re-point your remote without having to remove and add the remote from scratch. Python \u2693\ufe0e Lock pip Dependencies \u2693\ufe0e 1 pip freeze > requirements.txt Run as a Module \u2693\ufe0e 1 pip install -e .","title":"Cheat Codes"},{"location":"dev/cheat-codes/#cheat-codes","text":"The Konami Code","title":"Cheat Codes"},{"location":"dev/cheat-codes/#docker","text":"Below are some less-common Docker commands.","title":"Docker"},{"location":"dev/cheat-codes/#get-runtime-statistics","text":"1 docker stats $( docker ps --format = '{{.Names}}' ) This command will display detailed information about the docker containers you have running locally including: Container Name Name CPU % Memory Usage/Limit Memory % Network I/O Block Storage I/O Process IDs","title":"Get Runtime Statistics"},{"location":"dev/cheat-codes/#remove-all-stopped-containers","text":"1 docker rm $( docker ps -a -q ) If you have a lot of stopped containers (perhaps you didn't supply a container name when running images), you can run this command to automatically remove all stopped containers.","title":"Remove All Stopped Containers"},{"location":"dev/cheat-codes/#remove-untagged-containers","text":"1 docker images -q --filter \"dangling=true\" | xargs docker rmi","title":"Remove Untagged Containers"},{"location":"dev/cheat-codes/#prune-everything","text":"1 docker system prune --volumes This command will remove all unused: Containers Images (dangling & unused) Networks (Optionally) Volumes Note If you do not want to prune volumes, remove --volumes from the command above.","title":"Prune Everything"},{"location":"dev/cheat-codes/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"dev/cheat-codes/#cannot-connect-to-container-from-host","text":"In order to connect to a webserver you have running on your docker container, make sure you bind the server to 0.0.0.0 and not 127.0.0.1 like you would locally.","title":"Cannot Connect to Container from Host"},{"location":"dev/cheat-codes/#git","text":"","title":"Git"},{"location":"dev/cheat-codes/#remove-items-from-git-wo-deleting","text":"If you ever accidentally added something to your git repository and want to remove it from git without actually deleting the local version, you can run one of these commands: 1 git rm --cached <file-name> Remove a file from git without deleting it locally 1 git rm --cached -r <directory-name> Remove an entire directory from git without deleting it locally","title":"Remove Items from Git w/o Deleting"},{"location":"dev/cheat-codes/#repoint-remote-endpoint","text":"1 git remote set-url <remote-name> <url> If you ever move your code to a new remote system (say from GitHub to GitLab), you can use this command to re-point your remote without having to remove and add the remote from scratch.","title":"Repoint Remote Endpoint"},{"location":"dev/cheat-codes/#python","text":"","title":"Python"},{"location":"dev/cheat-codes/#lock-pip-dependencies","text":"1 pip freeze > requirements.txt","title":"Lock pip Dependencies"},{"location":"dev/cheat-codes/#run-as-a-module","text":"1 pip install -e .","title":"Run as a Module"},{"location":"dev/mkdocs/","text":"MKDocs \u2693\ufe0e Troubleshooting \u2693\ufe0e GitHub Pages Custom Domain \u2693\ufe0e If you are deploying your MKDocs site via the mkdocs gh-deploy command and finding that it is resetting your custom domain name settings, there is a solution for that. There is an undocumented feature of MKDocs that it will publish your site to GitHub Pages using a custom domain name only if you create a file called CNAME which contains the custom domain name of your site. If you do not create this special file, your site's custom domain name will be wiped out each time you deploy your site. For example if your site was called modelmodem.com you would (and I did) create a file called CNAME and place it at the root of your docs_dir . 1 modelmodem.com File /docs/CNAME","title":"MKDocs"},{"location":"dev/mkdocs/#mkdocs","text":"","title":"MKDocs"},{"location":"dev/mkdocs/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"dev/mkdocs/#github-pages-custom-domain","text":"If you are deploying your MKDocs site via the mkdocs gh-deploy command and finding that it is resetting your custom domain name settings, there is a solution for that. There is an undocumented feature of MKDocs that it will publish your site to GitHub Pages using a custom domain name only if you create a file called CNAME which contains the custom domain name of your site. If you do not create this special file, your site's custom domain name will be wiped out each time you deploy your site. For example if your site was called modelmodem.com you would (and I did) create a file called CNAME and place it at the root of your docs_dir . 1 modelmodem.com File /docs/CNAME","title":"GitHub Pages Custom Domain"},{"location":"dev/php/official-docker/","text":"The Official PHP Docker Image \u2693\ufe0e The official PHP Docker image is a good starting place for many PHP projects. It's a rock-solid implementation of PHP with close attention paid to best practices for PHP. The downside of this image is that it is not covered in the main different articles and blog posts on the Internet that cover how to configure PHP. This page is where I try to fill in some of the gaps. Location of Installed Resources \u2693\ufe0e Configuration Files \u2693\ufe0e While configuring your application you may need to update the default configuration settings for the image. The table below lists the locations of some of these files. Configuration Location Image Variant PEAR /usr/local/etc/pear.conf All PHP-FPM Enabled /usr/local/etc/php-fpm.conf FPM PHP-FPM Enabled Site /usr/local/etc/php-fpm.d/www.conf FPM Key Binaries \u2693\ufe0e Below are some of the key binary files that you may need to know about and whether or not they are on the PATH . Binaries Location Image Variant On PATH ? FPM Binary /usr/local/sbin/php-fpm FPM Yes PHPize /usr/local/bin/phpize All Yes","title":"Official Docker"},{"location":"dev/php/official-docker/#the-official-php-docker-image","text":"The official PHP Docker image is a good starting place for many PHP projects. It's a rock-solid implementation of PHP with close attention paid to best practices for PHP. The downside of this image is that it is not covered in the main different articles and blog posts on the Internet that cover how to configure PHP. This page is where I try to fill in some of the gaps.","title":"The Official PHP Docker Image"},{"location":"dev/php/official-docker/#location-of-installed-resources","text":"","title":"Location of Installed Resources"},{"location":"dev/php/official-docker/#configuration-files","text":"While configuring your application you may need to update the default configuration settings for the image. The table below lists the locations of some of these files. Configuration Location Image Variant PEAR /usr/local/etc/pear.conf All PHP-FPM Enabled /usr/local/etc/php-fpm.conf FPM PHP-FPM Enabled Site /usr/local/etc/php-fpm.d/www.conf FPM","title":"Configuration Files"},{"location":"dev/php/official-docker/#key-binaries","text":"Below are some of the key binary files that you may need to know about and whether or not they are on the PATH . Binaries Location Image Variant On PATH ? FPM Binary /usr/local/sbin/php-fpm FPM Yes PHPize /usr/local/bin/phpize All Yes","title":"Key Binaries"},{"location":"dev/py/pip/","text":"Working with pip \u2693\ufe0e Serializing Project Package Dependencies \u2693\ufe0e pip doesn't have an automatic mechanism for serializing the different project dependencies you have. Typically with a Python project, you would document your project's dependencies in a requirements.txt file. This would allow you to quickly re-install all your dependencies when the project is moved to a new machine or re-build for a deployment. Default Option: pip freeze \u2693\ufe0e You can use the freeze command, however, to output all of the dependencies you have installed and that output can then be sent to a requirements.txt file using the command below: 1 pip freeze > requirements.txt Serialize all pip modules. Better Option: pipreqs \u2693\ufe0e The pipreqs package can be used to create requirements.txt files with just the packages used in your local project. Since pip freeze saves all of the packages in your environment\u2014including the ones you don't actually use in your project, pipreqs is a cleaner solution. To install pipreqs : 1 pip install pipreqs You can then generate your project's requirements using the global pipreqs command: 1 2 $ pipreqs /project/location Successfully saved requirements file in /project/location/requirements.txt","title":"pip"},{"location":"dev/py/pip/#working-with-pip","text":"","title":"Working with pip"},{"location":"dev/py/pip/#serializing-project-package-dependencies","text":"pip doesn't have an automatic mechanism for serializing the different project dependencies you have. Typically with a Python project, you would document your project's dependencies in a requirements.txt file. This would allow you to quickly re-install all your dependencies when the project is moved to a new machine or re-build for a deployment.","title":"Serializing Project Package Dependencies"},{"location":"dev/py/pip/#default-option-pip-freeze","text":"You can use the freeze command, however, to output all of the dependencies you have installed and that output can then be sent to a requirements.txt file using the command below: 1 pip freeze > requirements.txt Serialize all pip modules.","title":"Default Option: pip freeze"},{"location":"dev/py/pip/#better-option-pipreqs","text":"The pipreqs package can be used to create requirements.txt files with just the packages used in your local project. Since pip freeze saves all of the packages in your environment\u2014including the ones you don't actually use in your project, pipreqs is a cleaner solution. To install pipreqs : 1 pip install pipreqs You can then generate your project's requirements using the global pipreqs command: 1 2 $ pipreqs /project/location Successfully saved requirements file in /project/location/requirements.txt","title":"Better Option: pipreqs"},{"location":"tech/my-stack/","text":"My Stack \u2693\ufe0e I recently had the pleasure of installing the Big Sur beta, having it totally corrupt my system, and having to re-install the OS from scratch. Through that process I boiled down the the base-level app ecosystem I use day to day and wanted to share it with you. Utilities \u2693\ufe0e Paste \u2693\ufe0e Paste is a fantastic clipboard manager application that saves items you copy to your clipboard into a tray at the bottom of your screen. It also provides a satisfying \"click\" sound when an item is copied to the clipboard\u2014a feature that is extremely helpful when copying MFA codes from your iPhone. 1Password \u2693\ufe0e Arguably the most important application you could have is some sort of password manager. There are many different options out there. I tried LastPass in the past but ultimately selected 1Password. It has a deep integration with MacOS and iOS which helps keep things simple. Bartender \u2693\ufe0e The number of apps providing compact menu bar apps for MacOS greatly outpaces the amount of space that exists in the menu bar itself. Bartender helps clear up space by allowing you to hide your less-used menu bar application. Pro Tip You can rearrange your menubar applications natively (with no app needed) by holding down ^ Ctrl and then clicking and dragging the menubar app.","title":"My Stack"},{"location":"tech/my-stack/#my-stack","text":"I recently had the pleasure of installing the Big Sur beta, having it totally corrupt my system, and having to re-install the OS from scratch. Through that process I boiled down the the base-level app ecosystem I use day to day and wanted to share it with you.","title":"My Stack"},{"location":"tech/my-stack/#utilities","text":"","title":"Utilities"},{"location":"tech/my-stack/#paste","text":"Paste is a fantastic clipboard manager application that saves items you copy to your clipboard into a tray at the bottom of your screen. It also provides a satisfying \"click\" sound when an item is copied to the clipboard\u2014a feature that is extremely helpful when copying MFA codes from your iPhone.","title":"Paste"},{"location":"tech/my-stack/#1password","text":"Arguably the most important application you could have is some sort of password manager. There are many different options out there. I tried LastPass in the past but ultimately selected 1Password. It has a deep integration with MacOS and iOS which helps keep things simple.","title":"1Password"},{"location":"tech/my-stack/#bartender","text":"The number of apps providing compact menu bar apps for MacOS greatly outpaces the amount of space that exists in the menu bar itself. Bartender helps clear up space by allowing you to hide your less-used menu bar application. Pro Tip You can rearrange your menubar applications natively (with no app needed) by holding down ^ Ctrl and then clicking and dragging the menubar app.","title":"Bartender"}]}